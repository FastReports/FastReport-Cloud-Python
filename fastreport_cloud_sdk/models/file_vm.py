# coding: utf-8

"""
    FastReport Cloud

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from fastreport_cloud_sdk.configuration import Configuration


class FileVM(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'parent_id': 'str',
        'tags': 'list[str]',
        'icon': 'str',
        'type': 'FileType',
        'size': 'int',
        'subscription_id': 'str',
        'status': 'FileStatus',
        'status_reason': 'FileStatusReason',
        'error_message': 'str',
        'is_deleted': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'parent_id': 'parentId',
        'tags': 'tags',
        'icon': 'icon',
        'type': 'type',
        'size': 'size',
        'subscription_id': 'subscriptionId',
        'status': 'status',
        'status_reason': 'statusReason',
        'error_message': 'errorMessage',
        'is_deleted': 'isDeleted'
    }

    def __init__(self, name=None, parent_id=None, tags=None, icon=None, type=None, size=None, subscription_id=None, status=None, status_reason=None, error_message=None, is_deleted=None, local_vars_configuration=None):  # noqa: E501
        """FileVM - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._parent_id = None
        self._tags = None
        self._icon = None
        self._type = None
        self._size = None
        self._subscription_id = None
        self._status = None
        self._status_reason = None
        self._error_message = None
        self._is_deleted = None
        self.discriminator = None

        self.name = name
        self.parent_id = parent_id
        self.tags = tags
        self.icon = icon
        if type is not None:
            self.type = type
        if size is not None:
            self.size = size
        self.subscription_id = subscription_id
        if status is not None:
            self.status = status
        if status_reason is not None:
            self.status_reason = status_reason
        self.error_message = error_message
        if is_deleted is not None:
            self.is_deleted = is_deleted

    @property
    def name(self):
        """Gets the name of this FileVM.  # noqa: E501


        :return: The name of this FileVM.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FileVM.


        :param name: The name of this FileVM.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def parent_id(self):
        """Gets the parent_id of this FileVM.  # noqa: E501


        :return: The parent_id of this FileVM.  # noqa: E501
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this FileVM.


        :param parent_id: The parent_id of this FileVM.  # noqa: E501
        :type parent_id: str
        """

        self._parent_id = parent_id

    @property
    def tags(self):
        """Gets the tags of this FileVM.  # noqa: E501


        :return: The tags of this FileVM.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this FileVM.


        :param tags: The tags of this FileVM.  # noqa: E501
        :type tags: list[str]
        """

        self._tags = tags

    @property
    def icon(self):
        """Gets the icon of this FileVM.  # noqa: E501


        :return: The icon of this FileVM.  # noqa: E501
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this FileVM.


        :param icon: The icon of this FileVM.  # noqa: E501
        :type icon: str
        """

        self._icon = icon

    @property
    def type(self):
        """Gets the type of this FileVM.  # noqa: E501


        :return: The type of this FileVM.  # noqa: E501
        :rtype: FileType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FileVM.


        :param type: The type of this FileVM.  # noqa: E501
        :type type: FileType
        """

        self._type = type

    @property
    def size(self):
        """Gets the size of this FileVM.  # noqa: E501


        :return: The size of this FileVM.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this FileVM.


        :param size: The size of this FileVM.  # noqa: E501
        :type size: int
        """

        self._size = size

    @property
    def subscription_id(self):
        """Gets the subscription_id of this FileVM.  # noqa: E501


        :return: The subscription_id of this FileVM.  # noqa: E501
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this FileVM.


        :param subscription_id: The subscription_id of this FileVM.  # noqa: E501
        :type subscription_id: str
        """

        self._subscription_id = subscription_id

    @property
    def status(self):
        """Gets the status of this FileVM.  # noqa: E501


        :return: The status of this FileVM.  # noqa: E501
        :rtype: FileStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this FileVM.


        :param status: The status of this FileVM.  # noqa: E501
        :type status: FileStatus
        """

        self._status = status

    @property
    def status_reason(self):
        """Gets the status_reason of this FileVM.  # noqa: E501


        :return: The status_reason of this FileVM.  # noqa: E501
        :rtype: FileStatusReason
        """
        return self._status_reason

    @status_reason.setter
    def status_reason(self, status_reason):
        """Sets the status_reason of this FileVM.


        :param status_reason: The status_reason of this FileVM.  # noqa: E501
        :type status_reason: FileStatusReason
        """

        self._status_reason = status_reason

    @property
    def error_message(self):
        """Gets the error_message of this FileVM.  # noqa: E501


        :return: The error_message of this FileVM.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this FileVM.


        :param error_message: The error_message of this FileVM.  # noqa: E501
        :type error_message: str
        """

        self._error_message = error_message

    @property
    def is_deleted(self):
        """Gets the is_deleted of this FileVM.  # noqa: E501


        :return: The is_deleted of this FileVM.  # noqa: E501
        :rtype: bool
        """
        return self._is_deleted

    @is_deleted.setter
    def is_deleted(self, is_deleted):
        """Sets the is_deleted of this FileVM.


        :param is_deleted: The is_deleted of this FileVM.  # noqa: E501
        :type is_deleted: bool
        """

        self._is_deleted = is_deleted

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileVM):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FileVM):
            return True

        return self.to_dict() != other.to_dict()
