# coding: utf-8

"""
    FastReport Cloud

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from fastreport_cloud_sdk.configuration import Configuration


class TaskSettingsVM(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'prepare': 'bool',
        'export_template': 'bool',
        'export_report': 'bool',
        'send_via_email': 'bool',
        'upload_to_ftp': 'bool',
        'send_via_webhook': 'bool',
        'fetch_data': 'bool',
        'thumbnail_report': 'bool',
        'thumbnail_template': 'bool'
    }

    attribute_map = {
        'prepare': 'prepare',
        'export_template': 'exportTemplate',
        'export_report': 'exportReport',
        'send_via_email': 'sendViaEmail',
        'upload_to_ftp': 'uploadToFTP',
        'send_via_webhook': 'sendViaWebhook',
        'fetch_data': 'fetchData',
        'thumbnail_report': 'thumbnailReport',
        'thumbnail_template': 'thumbnailTemplate'
    }

    def __init__(self, prepare=None, export_template=None, export_report=None, send_via_email=None, upload_to_ftp=None, send_via_webhook=None, fetch_data=None, thumbnail_report=None, thumbnail_template=None, local_vars_configuration=None):  # noqa: E501
        """TaskSettingsVM - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._prepare = None
        self._export_template = None
        self._export_report = None
        self._send_via_email = None
        self._upload_to_ftp = None
        self._send_via_webhook = None
        self._fetch_data = None
        self._thumbnail_report = None
        self._thumbnail_template = None
        self.discriminator = None

        self.prepare = prepare
        self.export_template = export_template
        self.export_report = export_report
        self.send_via_email = send_via_email
        self.upload_to_ftp = upload_to_ftp
        self.send_via_webhook = send_via_webhook
        self.fetch_data = fetch_data
        self.thumbnail_report = thumbnail_report
        self.thumbnail_template = thumbnail_template

    @property
    def prepare(self):
        """Gets the prepare of this TaskSettingsVM.  # noqa: E501


        :return: The prepare of this TaskSettingsVM.  # noqa: E501
        :rtype: bool
        """
        return self._prepare

    @prepare.setter
    def prepare(self, prepare):
        """Sets the prepare of this TaskSettingsVM.


        :param prepare: The prepare of this TaskSettingsVM.  # noqa: E501
        :type prepare: bool
        """

        self._prepare = prepare

    @property
    def export_template(self):
        """Gets the export_template of this TaskSettingsVM.  # noqa: E501


        :return: The export_template of this TaskSettingsVM.  # noqa: E501
        :rtype: bool
        """
        return self._export_template

    @export_template.setter
    def export_template(self, export_template):
        """Sets the export_template of this TaskSettingsVM.


        :param export_template: The export_template of this TaskSettingsVM.  # noqa: E501
        :type export_template: bool
        """

        self._export_template = export_template

    @property
    def export_report(self):
        """Gets the export_report of this TaskSettingsVM.  # noqa: E501


        :return: The export_report of this TaskSettingsVM.  # noqa: E501
        :rtype: bool
        """
        return self._export_report

    @export_report.setter
    def export_report(self, export_report):
        """Sets the export_report of this TaskSettingsVM.


        :param export_report: The export_report of this TaskSettingsVM.  # noqa: E501
        :type export_report: bool
        """

        self._export_report = export_report

    @property
    def send_via_email(self):
        """Gets the send_via_email of this TaskSettingsVM.  # noqa: E501


        :return: The send_via_email of this TaskSettingsVM.  # noqa: E501
        :rtype: bool
        """
        return self._send_via_email

    @send_via_email.setter
    def send_via_email(self, send_via_email):
        """Sets the send_via_email of this TaskSettingsVM.


        :param send_via_email: The send_via_email of this TaskSettingsVM.  # noqa: E501
        :type send_via_email: bool
        """

        self._send_via_email = send_via_email

    @property
    def upload_to_ftp(self):
        """Gets the upload_to_ftp of this TaskSettingsVM.  # noqa: E501


        :return: The upload_to_ftp of this TaskSettingsVM.  # noqa: E501
        :rtype: bool
        """
        return self._upload_to_ftp

    @upload_to_ftp.setter
    def upload_to_ftp(self, upload_to_ftp):
        """Sets the upload_to_ftp of this TaskSettingsVM.


        :param upload_to_ftp: The upload_to_ftp of this TaskSettingsVM.  # noqa: E501
        :type upload_to_ftp: bool
        """

        self._upload_to_ftp = upload_to_ftp

    @property
    def send_via_webhook(self):
        """Gets the send_via_webhook of this TaskSettingsVM.  # noqa: E501


        :return: The send_via_webhook of this TaskSettingsVM.  # noqa: E501
        :rtype: bool
        """
        return self._send_via_webhook

    @send_via_webhook.setter
    def send_via_webhook(self, send_via_webhook):
        """Sets the send_via_webhook of this TaskSettingsVM.


        :param send_via_webhook: The send_via_webhook of this TaskSettingsVM.  # noqa: E501
        :type send_via_webhook: bool
        """

        self._send_via_webhook = send_via_webhook

    @property
    def fetch_data(self):
        """Gets the fetch_data of this TaskSettingsVM.  # noqa: E501


        :return: The fetch_data of this TaskSettingsVM.  # noqa: E501
        :rtype: bool
        """
        return self._fetch_data

    @fetch_data.setter
    def fetch_data(self, fetch_data):
        """Sets the fetch_data of this TaskSettingsVM.


        :param fetch_data: The fetch_data of this TaskSettingsVM.  # noqa: E501
        :type fetch_data: bool
        """

        self._fetch_data = fetch_data

    @property
    def thumbnail_report(self):
        """Gets the thumbnail_report of this TaskSettingsVM.  # noqa: E501


        :return: The thumbnail_report of this TaskSettingsVM.  # noqa: E501
        :rtype: bool
        """
        return self._thumbnail_report

    @thumbnail_report.setter
    def thumbnail_report(self, thumbnail_report):
        """Sets the thumbnail_report of this TaskSettingsVM.


        :param thumbnail_report: The thumbnail_report of this TaskSettingsVM.  # noqa: E501
        :type thumbnail_report: bool
        """

        self._thumbnail_report = thumbnail_report

    @property
    def thumbnail_template(self):
        """Gets the thumbnail_template of this TaskSettingsVM.  # noqa: E501


        :return: The thumbnail_template of this TaskSettingsVM.  # noqa: E501
        :rtype: bool
        """
        return self._thumbnail_template

    @thumbnail_template.setter
    def thumbnail_template(self, thumbnail_template):
        """Sets the thumbnail_template of this TaskSettingsVM.


        :param thumbnail_template: The thumbnail_template of this TaskSettingsVM.  # noqa: E501
        :type thumbnail_template: bool
        """

        self._thumbnail_template = thumbnail_template

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskSettingsVM):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TaskSettingsVM):
            return True

        return self.to_dict() != other.to_dict()
